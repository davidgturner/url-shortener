package main

import (
	"context"
	"encoding/json"
	"log"
	"math/rand"
	"net/http"
	"time"

	// _ "url-shortener/docs" // docs is generated by Swag CLI, you have to import it.

	httpSwagger "github.com/swaggo/http-swagger"

	"github.com/gorilla/mux"
	// "github.com/swaggo/http-swagger"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	// "github.com/gorilla/mux"
	// httpSwagger "github.com/swaggo/http-swagger"
	// "github.com/swaggo/swag"
	// _ "github.com/swaggo/http-swagger/example/go-chi/docs"
)

type ShortURL struct {
	ID        string    `json:"id" bson:"_id"`
	TargetURL string    `json:"target_url" bson:"target_url"`
	CreatedAt time.Time `json:"created_at" bson:"created_at"`
}

var collection *mongo.Collection

func main() {
	// Connect to MongoDB
	clientOptions := options.Client().ApplyURI("mongodb://localhost:27017")
	client, err := mongo.Connect(context.Background(), clientOptions)
	if err != nil {
		log.Fatal(err)
	}
	collection = client.Database("url-shortener").Collection("urls")

	// Create a new router
	r := mux.NewRouter()

	// Define routes
	r.HandleFunc("/api/shorten", shortenURL).Methods("POST")
	r.HandleFunc("/{id}", redirect).Methods("GET")

	// r.PathPrefix("/swagger/").Handler(httpSwagger.WrapHandler(http.FileServer(http.Dir("./docs"))))
	// d := http.Dir("./docs")
	// fs := http.FileServer(d)
	// wrapHandler := Handler()
	// wh := httpSwagger.WrapHandler(r.)
	// r.PathPrefix("/swagger/").Handler()

	// r.Get("/swagger/*", httpSwagger.Handler(
	// 	httpSwagger.URL("http://localhost:8080/docs/swagger.json"), //The url pointing to API definition
	// ))

	// httpSwagger.WrapHandler(fs)
	// r.PathPrefix("/swagger/")
	// r.HandleFunc("/products", ProductsHandler)
	// r.HandleFunc("/swagger/", ArticlesHandler)

	// Swagger
	// sh := httpSwagger.WrapHandler(http.FileServer(http.Dir("./docs")))

	h := httpSwagger.Handler(
		httpSwagger.URL("/api/shorten"), //The url pointing to API definition
	)

	// h := httpSwagger.Handler(
	// 	http.FileServer(http.Dir("./docs"))
	// )

	r.PathPrefix("/swagger/").Handler(h)

	// Start the server
	log.Println("Starting server on port 8080")
	http.ListenAndServe(":8080", r)
}

func shortenURL(w http.ResponseWriter, r *http.Request) {
	// Parse request body
	var data map[string]string
	err := json.NewDecoder(r.Body).Decode(&data)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	// Generate ID
	id := generateID()

	// Insert into database
	shortURL := ShortURL{
		ID:        id,
		TargetURL: data["target_url"],
		CreatedAt: time.Now(),
	}
	_, err = collection.InsertOne(context.Background(), shortURL)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// Return shortened URL
	response := map[string]string{
		"short_url": "http://localhost:8080/" + id,
	}
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func redirect(w http.ResponseWriter, r *http.Request) {
	// Get ID from URL
	vars := mux.Vars(r)
	id := vars["id"]

	// Look up URL in database
	filter := bson.M{"_id": id}
	var result ShortURL
	err := collection.FindOne(context.Background(), filter).Decode(&result)
	if err != nil {
		http.NotFound(w, r)
		return
	}

	// Redirect to target URL
	http.Redirect(w, r, result.TargetURL, http.StatusSeeOther)
}

func generateID() string {
	chars := "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	id := make([]byte, 7)
	rand.Seed(time.Now().UnixNano())
	for i := range id {
		id[i] = chars[rand.Intn(len(chars))]
	}
	return string(id)
}
